[
    {
        "label": "gcd",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "A_Exciting_Bets",
        "description": "A_Exciting_Bets",
        "peekOfCode": "def solve(a: int, b: int):\n    moves, res = 0,0\n    if a != b:\n        res = abs(a-b)\n        moves = min(a%res, res-a%res)        \n    return f\"{res} {moves}\"\nt = int(input())\nfor _ in range(t):\n    a, b = tuple(map(int, input().split()))\n    print(solve(a, b))",
        "detail": "A_Exciting_Bets",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "A_Exciting_Bets",
        "description": "A_Exciting_Bets",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    a, b = tuple(map(int, input().split()))\n    print(solve(a, b))",
        "detail": "A_Exciting_Bets",
        "documentation": {}
    },
    {
        "label": "fetch_problems",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def fetch_problems(min_rating, max_rating, num_problems):\n    url = \"https://codeforces.com/api/problemset.problems\"\n    response = requests.get(url)\n    response.raise_for_status()\n    data = response.json()\n    problems = data['result']['problems']\n    filtered_problems = [p for p in problems if 'rating' in p and min_rating <= p['rating'] <= max_rating]\n    if len(filtered_problems) < num_problems:\n        raise ValueError(f\"Not enough problems found in the rating range {min_rating}-{max_rating}.\")\n    random_problems = random.sample(filtered_problems, num_problems)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "write_problems_to_file",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def write_problems_to_file(problems, filename):\n    with open(filename, 'w') as file:\n        for problem in problems:\n            problem_id = problem['contestId']\n            problem_index = problem['index']\n            problem_name = problem['name']\n            problem_rating = problem.get('rating', 'N/A')  # Handle missing ratings gracefully\n            problem_url = f\"https://codeforces.com/problemset/problem/{problem_id}/{problem_index}\"\n            file.write(f\"Problem Name: {problem_name}\\n\")\n            file.write(f\"Rating: {problem_rating}\\n\")",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def main():\n    min_rating = 1000\n    max_rating = 1300\n    num_problems = 10\n    filename = 'codeforces_problems.txt'\n    try:\n        problems = fetch_problems(min_rating, max_rating, num_problems)\n        write_problems_to_file(problems, filename)\n        print(f\"Saved {num_problems} problems to {filename}.\")\n    except Exception as e:",
        "detail": "test",
        "documentation": {}
    }
]